#!/usr/bin/sh

# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#

# This scripts checks that:
# - pushing is done to a refs/for/ branch
# - commit messages don't start with WIP or LOCAL
# If either of these fail a confirmation prompt is given

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

confirm() {
	printf "%s" "Continue with commit? [N|y] " >&2
	read -r reply </dev/tty
	echo
	case "$reply" in
	[yY])
		echo "Allowing push" >&2
		;;
	*)
		echo "Aborting direct push" >&2
		exit 1
		;;
	esac
}

while read local_ref local_oid remote_ref remote_oid
do
	if [ "${remote_ref#refs/for}" = "$remote_ref" ]; then
		echo "Trying to push to $remote_ref which is not a ref/for" >&2
		confirm
	fi
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 -i --grep '^WIP' --grep "^local" "$range")
		if test -n "$commit"
		then
			echo "Found WIP/LOCAL commit in $local_ref:" >&2
			git show --no-patch --oneline "$commit" >&2
			confirm
		fi
	fi
done

exit 0
