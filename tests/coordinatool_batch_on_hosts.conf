# Sample configuration file with default values
# The same file is shared with clients and servers, each ignoring
# values they don't care about.
# All key/values are case insensitive.
# Priority is command line options > environment variables > config file
#
###############################
# Common to client and server #
###############################

# Coordinatool address to connect/bind to
host localhost

# Coordinatool port to connect/bind to
port 5123

# message verbosity. Available levels are, in order,
# debug, info, normal, warn, error, off.
verbose normal

##################
# server options #
##################

# archive_id defaults to unset, meaning any archive_id is accepted.
# Set with 'archive_id X' as many times as required
#archive_id XYZ

# Redis server host/port to connect to
redis_host 127.0.0.1
redis_port 6379

# Time we want to remember clients when they disconnect, or at server
# start if there were clients in redis db.
# Make this longer than the maximum reconnection interval.
client_grace_ms 10000

# Force archive requests that match these to go to specified hosts.
# First argument is searched in data field, host name must match client id
# exactly (hostname until first dot by default)
archive_on_hosts tag=n0 agent_0
archive_on_hosts tag=n1 agent_1 agent_2
archive_on_hosts tag=n2 agent_3 agent_4

# Make it so a copytool only ever gets archive requests for a given 'hint'
# during the defined time slice. The slice has two limits:
# - maximum time during which the tag is reserved even if no request for
#   said tag are waiting.
# - maximum time after which we flush the batch for a new tag (if no other
#   tag is waiting the slot is immediately re-allocated to the same tag)
#   0 or unset means no limit
# No slice time set means no grouping; the example below sets clients to
# refuse new tags for 5 minutes after the last work done, or switch to aa
# new tag after 1h.

# for testing: give it reasonable timeouts to make sure we can do all the
# work within the max time and still run the tests in ~1min
batch_archives_slices_sec 20 40

# Maximum different hints per client, defaults to one.
# If more than one:
# - each 'slot' has its own time slicing
# - prefer the least busy client first (by tag count only)
#batch_archives_slots_per_client 1


##################
# client options #
##################

# client_id defaults to current hostname
#client_id XYZ

# max number of restore/archive/remove to accept at any given time.
# -1 means unlimited
max_restore -1
max_archive -1
max_remove -1

# max hsm action list size a single recv command can accept.
# This drives the allocation size on client, the server will respect what
# the client requests.
hal_size 1M
