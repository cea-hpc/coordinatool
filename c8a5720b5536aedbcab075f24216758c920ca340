{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8bafbcfe_4b7f1751",
        "filename": "client_common/client_common.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T13:15:57Z",
      "side": 1,
      "message": "question: what does this stand for?",
      "range": {
        "startLine": 50,
        "startChar": 21,
        "endLine": 50,
        "endChar": 25
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2feff65_196db2b0",
        "filename": "client_common/client_common.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T13:24:58Z",
      "side": 1,
      "message": "This is the greeting keyword used in smtp (it accepts both helo and ehlo)\nHappy to rename it to capabilities or something less controvertial",
      "parentUuid": "8bafbcfe_4b7f1751",
      "range": {
        "startLine": 50,
        "startChar": 21,
        "endLine": 50,
        "endChar": 25
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a10ebc5_7b9a9d3e",
        "filename": "client_common/client_common.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T14:15:42Z",
      "side": 1,
      "message": "I don\u0027t mind the name. Maybe just a description of its purpose would be great in \u0027common/protocol.h\u0027.",
      "parentUuid": "e2feff65_196db2b0",
      "range": {
        "startLine": 50,
        "startChar": 21,
        "endLine": 50,
        "endChar": 25
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77621edf_0278dcfc",
        "filename": "client_common/client_common.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T15:17:03Z",
      "side": 1,
      "message": "ok.",
      "parentUuid": "3a10ebc5_7b9a9d3e",
      "range": {
        "startLine": 50,
        "startChar": 21,
        "endLine": 50,
        "endChar": 25
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "831c0e79_a3470f06",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T13:15:57Z",
      "side": 1,
      "message": "minor: why use abort and not return an error which would be handled by callers?",
      "range": {
        "startLine": 136,
        "startChar": 2,
        "endLine": 136,
        "endChar": 10
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af5f51fd_21999e01",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T13:24:58Z",
      "side": 1,
      "message": "The only reason this would fail is a memory allocation failure, the code in coordinatool doesn\u0027t deal with such errors.\nThis is purely a design decision but I find it much easier to abort and have systemd or whatever restart the daemon in the rare chance that occurs (on linux with glibc, I don\u0027t think it can actually happen: malloc will happily provide a pointer to use, and the failure will happen when the program tries to access that memory space)\n\nabort also has the advantage of being easy to debug if I need to be proved wrong later",
      "parentUuid": "831c0e79_a3470f06",
      "range": {
        "startLine": 136,
        "startChar": 2,
        "endLine": 136,
        "endChar": 10
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0c9b0d0_6c265b1e",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T14:15:42Z",
      "side": 1,
      "message": "What do you mean by easy to debug? I was going to say the opposit and suggest at least to print some debug information before aborting. Is there a way to get a stack trace after an abort?",
      "parentUuid": "af5f51fd_21999e01",
      "range": {
        "startLine": 136,
        "startChar": 2,
        "endLine": 136,
        "endChar": 10
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db20984c_59768585",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T15:17:03Z",
      "side": 1,
      "message": "production machines have coredumpctl or abrt setup so we will have a full backtrace.\nI agree printing it would be nicer, but I\u0027m not aware of any way of doing that without relying on external tools",
      "parentUuid": "c0c9b0d0_6c265b1e",
      "range": {
        "startLine": 136,
        "startChar": 2,
        "endLine": 136,
        "endChar": 10
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da563fc4_c0390b81",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T15:24:35Z",
      "side": 1,
      "message": "You mean printing the backtrace?\n\nI was thinking about printing a debug log in stderr before aborting (I think stderr is not buffered so this should be fine). Maybe we can replace abort() calls by an ABORT() macro which would at least display the filename and position of the abort for debug purposes? It could be disabled at compile time by a \u0027#define/undef DEBUG\u0027.\n\nIf we think long term, we can imagine having a complete logging system which would record function entries and protocol events making the debugging of aborts easier.",
      "parentUuid": "db20984c_59768585",
      "range": {
        "startLine": 136,
        "startChar": 2,
        "endLine": 136,
        "endChar": 10
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2ef66fa_24f3c8db",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T15:37:14Z",
      "side": 1,
      "message": "I\u0027m explicitly not using assert() because I do not want these checks disabled for production builds. That\u0027s really a behavior of assert that I can\u0027t agree with.\n\nI don\u0027t mind defining our own assert macro that would stay valid and print file/line/failing check, that is definitely better than the current code, but once again these can\u0027t fail so arguing is a waste of time. I\u0027ve added it to my todo but that is really low priority for me.\n\nwrt. your logging system, please don\u0027t -- we don\u0027t need such things in 2021. If you ever need something like this uprobe allows you to log when you enter which function and prints backtraces etc:\nhttps://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md#3-uprobeuretprobe-dynamic-tracing-user-level\nLet\u0027s not add code churn for something that can be done easily.",
      "parentUuid": "da563fc4_c0390b81",
      "range": {
        "startLine": 136,
        "startChar": 2,
        "endLine": 136,
        "endChar": 10
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01287776_58d90b46",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T13:15:57Z",
      "side": 1,
      "message": "nit: this is not necessary",
      "range": {
        "startLine": 149,
        "startChar": 2,
        "endLine": 149,
        "endChar": 16
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "491fe260_9b4f236c",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T13:24:58Z",
      "side": 1,
      "message": "This is intentional for when code is added, I generally try to keep error cases this way even if not strictly required",
      "parentUuid": "01287776_58d90b46",
      "range": {
        "startLine": 149,
        "startChar": 2,
        "endLine": 149,
        "endChar": 16
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faf142cb_48ce5c3d",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T14:15:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "491fe260_9b4f236c",
      "range": {
        "startLine": 149,
        "startChar": 2,
        "endLine": 149,
        "endChar": 16
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b854a92_eaa44337",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T13:15:57Z",
      "side": 1,
      "message": "defect: you must check id as strdup(NULL) creates a segfault",
      "range": {
        "startLine": 161,
        "startChar": 21,
        "endLine": 161,
        "endChar": 31
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaf11bad_fc5dddcf",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T13:24:58Z",
      "side": 1,
      "message": "hmm, that\u0027s kind of the same argument as earlier, but I agree it\u0027s best to add a check here. Adding an abort.",
      "parentUuid": "6b854a92_eaa44337",
      "range": {
        "startLine": 161,
        "startChar": 21,
        "endLine": 161,
        "endChar": 31
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc9ab08d_907288b7",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T13:15:57Z",
      "side": 1,
      "message": "major: strdup could fail",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 162,
        "endChar": 11
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "642e36bb_63fb410e",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T13:15:57Z",
      "side": 1,
      "message": "typo: ours",
      "range": {
        "startLine": 166,
        "startChar": 58,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32ea1326_8c7efe10",
        "filename": "client_common/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-09-21T13:24:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "642e36bb_63fb410e",
      "range": {
        "startLine": 166,
        "startChar": 58,
        "endLine": 166,
        "endChar": 63
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a4575a_4b1316e7",
        "filename": "copytool/protocol.c",
        "patchSetId": 1
      },
      "lineNbr": 395,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2021-09-21T13:15:57Z",
      "side": 1,
      "message": "suggest: return -ENOMEM ?",
      "range": {
        "startLine": 395,
        "startChar": 2,
        "endLine": 395,
        "endChar": 10
      },
      "revId": "c8a5720b5536aedbcab075f24216758c920ca340",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}