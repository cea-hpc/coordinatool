{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dc63a67d_b025fdca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2022-06-08T13:41:41Z",
      "side": 1,
      "message": "I will be honest, I will trust Guillaume\u0027s judgement on that one",
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe78da73_04954729",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "I put -1 because of my comment regarding the lack of check of archive_ids for copytools.",
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40a8b66a_7ecff6ec",
        "filename": "client/client.c",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "minor: you should add --fsname to the help",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d955504_92d33836",
        "filename": "client/client.c",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "Ack, will add all the new options in a later patch I always forget...",
      "parentUuid": "40a8b66a_7ecff6ec",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7478ceb5_513870db",
        "filename": "client/client.c",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2022-06-08T13:41:41Z",
      "side": 1,
      "message": "question: what is that value ? Why not use \u0027f\u0027 ? You don\u0027t want to have a short option for this ?",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 22
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55ec5cb2_1d7258c6",
        "filename": "client/client.c",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-08T13:51:34Z",
      "side": 1,
      "message": "yes, it\u0027s just a way to add long options without short options (optargs uses ints so anything \u003e\u003d 256 is free to use and won\u0027t conflict with possible short options)\n\nI guess we could add a short option, but I think just a long option is enough for that -- if it turns out useful we can change it to \u0027f\u0027 later (it\u0027ll work without fsname being set, setting it is only used as a sanity check on server. Speaking of which I\u0027d probably need to test it...)",
      "parentUuid": "7478ceb5_513870db",
      "range": {
        "startLine": 107,
        "startChar": 19,
        "endLine": 107,
        "endChar": 22
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9f7fe1c_5f1121cf",
        "filename": "copytool/coordinatool.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "comment: regarding my comment about checking the archive_ids that the copytool support, I don\u0027t see the archive_ids in this structure which means that it is probably not checked in the code.\n\nAlso, it seems that the archives and archive_count parameters of llapi_hsm_copytool_register are unused in preload/preload.c.",
      "range": {
        "startLine": 65,
        "startChar": 7,
        "endLine": 65,
        "endChar": 13
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b259ab4e_71d10538",
        "filename": "copytool/coordinatool.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "it\u0027s a bigger problem than this, the protocol expects a single archive_id in recv but it should be a list as it is for copytools; and the clients need to send it properly.\nI can\u0027t fix it fast so it\u0027ll be fixed in a later commit, added to my todo",
      "parentUuid": "d9f7fe1c_5f1121cf",
      "range": {
        "startLine": 65,
        "startChar": 7,
        "endLine": 65,
        "endChar": 13
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c50d35f4_e399451c",
        "filename": "copytool/coordinatool.h",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T11:44:28Z",
      "side": 1,
      "message": "Ok, I will put +1 then.",
      "parentUuid": "b259ab4e_71d10538",
      "range": {
        "startLine": 65,
        "startChar": 7,
        "endLine": 65,
        "endChar": 13
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccc06793_66d41fcb",
        "filename": "copytool/coordinatool.h",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "nit: maybe we can use a name a bit more expressive",
      "range": {
        "startLine": 193,
        "startChar": 57,
        "endLine": 193,
        "endChar": 61
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0763afd_948da711",
        "filename": "copytool/coordinatool.h",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "it\u0027s already json_hai in the code, I\u0027ve fixed the header.",
      "parentUuid": "ccc06793_66d41fcb",
      "range": {
        "startLine": 193,
        "startChar": 57,
        "endLine": 193,
        "endChar": 61
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59e53b2a_05b079fb",
        "filename": "copytool/coordinatool.h",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "style: I see this line is not aligned with \u0027struct\u0027 above.",
      "range": {
        "startLine": 194,
        "startChar": 9,
        "endLine": 194,
        "endChar": 28
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2eafe6c_cd65f386",
        "filename": "copytool/coordinatool.h",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "a later commit aligned it -- sorry, I\u0027m not going to bother untangling these patches...",
      "parentUuid": "59e53b2a_05b079fb",
      "range": {
        "startLine": 194,
        "startChar": 9,
        "endLine": 194,
        "endChar": 28
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36565ba7_8f109ec8",
        "filename": "copytool/lhsm.c",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "nit/style: maybe this would be a bit more readable:\n\n```\nrc \u003d hsm_action_enqueue(...);\nif (rc \u003c 0)\n    ...\n```",
      "range": {
        "startLine": 45,
        "startChar": 5,
        "endLine": 48,
        "endChar": 26
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e22dbc55_3e79bd53",
        "filename": "copytool/lhsm.c",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "hmm, I use quite a lot of these if ((rc \u003d ...) in protocol.c, but I guess I agree it\u0027s not really great and shouldn\u0027t leak out to other files.",
      "parentUuid": "36565ba7_8f109ec8",
      "range": {
        "startLine": 45,
        "startChar": 5,
        "endLine": 48,
        "endChar": 26
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ce5f74b_31b90fe3",
        "filename": "copytool/protocol.c",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "question: could these sort of state machine handling be done outside of the callbacks? So that, each time a client sends request, we know that its connected without having to do it explicitly in the callback. This not a big deal since I think there is only one such callback on the server. But this could be extended to the clients as well to keep track of the state of the server.\n\nThis is just a thought, nothing to take into consideration at the moment or even in this patch.",
      "range": {
        "startLine": 147,
        "startChar": 1,
        "endLine": 147,
        "endChar": 34
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c612c4c7_75d8df41",
        "filename": "copytool/protocol.c",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "hm, this state machine is actually quite subtle and I already had two problems with these in this patch series; mostly because there are expectations about what part of the union is valid and in which list the client \u0027node\u0027 is depending on the state.\n\nA later patch in here added quite a few checks to make sure a client that\u0027s already waiting for recv can\u0027t send another recv etc even if I haven\u0027t had this bug yet, and it\u0027s just all too imbricated to share in common code imo.\nWorth thinking about it at some point maybe but we\u0027ll need to have better typing, this is the kind of things that are much harder to get wrong with proper \"enum with data\" as many high level languages do :/",
      "parentUuid": "9ce5f74b_31b90fe3",
      "range": {
        "startLine": 147,
        "startChar": 1,
        "endLine": 147,
        "endChar": 34
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b8e8661_b19630fe",
        "filename": "copytool/protocol.c",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T11:44:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c612c4c7_75d8df41",
      "range": {
        "startLine": 147,
        "startChar": 1,
        "endLine": 147,
        "endChar": 34
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b71007d8_a5d7d69a",
        "filename": "copytool/protocol.c",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2022-06-08T13:41:41Z",
      "side": 1,
      "message": "question: so the error code that will be replied corresponds to the error of last failed enqueue ? Wouldn\u0027t it better to return the first one (though it doesn\u0027t matter much I agree) ?",
      "range": {
        "startLine": 286,
        "startChar": 3,
        "endLine": 286,
        "endChar": 17
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4692a92_35168150",
        "filename": "copytool/protocol.c",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-08T13:51:34Z",
      "side": 1,
      "message": "yes, I just wanted to avoid overwriting any failure with a success code it doesn\u0027t really matter to me if we return the first or last error.\n\nIn practice coordinatool has logs close to where the error happened, so we\u0027ll have an error log message for each of these and callers of this function will probably behave the same whatever errors comes up and it really doesn\u0027t matter, but it\u0027s easy to change if you have strong feelings",
      "parentUuid": "b71007d8_a5d7d69a",
      "range": {
        "startLine": 286,
        "startChar": 3,
        "endLine": 286,
        "endChar": 17
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "270c32f1_68b387a7",
        "filename": "copytool/protocol.c",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2022-06-08T13:54:09Z",
      "side": 1,
      "message": "I have no problem with this, just wanted to make sure it was intended",
      "parentUuid": "b4692a92_35168150",
      "range": {
        "startLine": 286,
        "startChar": 3,
        "endLine": 286,
        "endChar": 17
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b063d6_c95ff2c6",
        "filename": "copytool/queue.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "question: do you intend to do something on error here at some point? Presumably, if this fails it could be that the REDIS server is not available. We could retry at some point later or have a thread continually retry.\n\nI don\u0027t know how well Lustre\u0027s coordinator handle a request which was sent to the coordinatool but it forgot about it. Presumably the request will have to be canceled manually at some point since the timeout is very long for the coordinatool to work.\n\nAlso, I assume redis_insert will log the failure so that the admin knows where to look for unsaved requests after a failure of the coordinatool.",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 150,
        "endChar": 37
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a516d7f_4d5cfa37",
        "filename": "copytool/queue.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "My stance at the moment is that redis is purely optional and should not be trusted: it\u0027s convenient for server restarts, but that\u0027s about it.\n\nThe code that parses active_requests from mds is still valid and works, so if there is a stuck request the way to handle it would be to just run that. For production I\u0027d suggest running it in a cron as it\u0027s harmless if the states are synchronous -- just need to make sure it runs fast enough... A very lofty goal would be to have request processing times statistics to check that eventually but I don\u0027t think I\u0027ll ever get there, although it\u0027s not difficult to do :)",
      "parentUuid": "d5b063d6_c95ff2c6",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 150,
        "endChar": 37
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1fbd2d2_d911b639",
        "filename": "copytool/queue.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T11:44:28Z",
      "side": 1,
      "message": "I\u0027m not sure I understand the last part of your comment. Do you mean, when a request has been stuck for too long, we ask the MDS for the list of requests? Or we consider it stuck and try to reschedule it somehow?",
      "parentUuid": "5a516d7f_4d5cfa37",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 150,
        "endChar": 37
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85200273_37b6e0fa",
        "filename": "copytool/queue.c",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T11:59:29Z",
      "side": 1,
      "message": "There\u0027s two parts:\n\n- if the client send failed somehow it *should* bubble up somewhere that\u0027ll disconnect the client (e.g. main epoll loop does this, schedule client does this). There might be code paths that don\u0027t, these should be fixed if we notice, but I think we\u0027re mostly ok here: send or receive failure \u003d disconnect.\nWhen that client disconnects with the latest version it\u0027s put in disconnected state for a while (grace period) from which either it reconnects and we check what it says is running (if it wasn\u0027t really running we\u0027ll reschedule it), or it didn\u0027t reconnect in time and we send requests to other clients.\n\n- If the coordinatool happens to restart at this point -- it\u0027s actually the same. It\u0027ll recreate a client from the redis assigned hash, but the requests will only stay \"assigned\" for the duration of the grace period: either the client shows up again or we put all requests back in the pool to be scheduled to any other client.\n \nSo really the assigned part is just remembering \"oh this request might be scheduled, let\u0027s not send it to a client immediately when we restart\" -- we don\u0027t *really* care which client it\u0027s assigned to, it\u0027s only an optimization.\n\n\nThe last part about the parse_active request is a bit more subtle, it\u0027s for the case when we\u0027ve received work from the coordinator but it\u0027s not been stored in the main redis table yet.\nThis is a problem because of the coordinator design: there\u0027s no acknowledgement, so if the client the coordinator runs on crashes I believe lustre will not properly resend whatever it just sent until timeout, which we don\u0027t want to wait.\nIt\u0027s unfortunate, but it should be very rare... yet unfortunately required; I don\u0027t think any amout of redis or any other stable memory could spare us from having this fallback.\n\nIf queue request is too slow in production it could check in redis what the server knows about and only send requests not in redis for example, there\u0027s room for optimization, but if it\u0027s too slow just reading the active requests file is going to be slow for lustre anyway so I don\u0027t think we need to worry about this. We still need to keep the total amount of active requests reasonably (up to tens of thousands) small.",
      "parentUuid": "c1fbd2d2_d911b639",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 150,
        "endChar": 37
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70e4c391_2629bf9d",
        "filename": "copytool/queue.c",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "nit: to make it a bit more explicit we could say hai_data which is I think what you mean here.",
      "range": {
        "startLine": 163,
        "startChar": 40,
        "endLine": 163,
        "endChar": 44
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fe0f13b_76cb4a01",
        "filename": "copytool/queue.c",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "70e4c391_2629bf9d",
      "range": {
        "startLine": 163,
        "startChar": 40,
        "endLine": 163,
        "endChar": 44
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92e57497_dc1a32a8",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "minor: I don\u0027t think this is strictly true. If the client is able to group requests by hsm_action_lists before giving them to the real copytool, the server could send any request as long as the client support that particular archive_id. Which would allow us to schedule a bit more freely on the server side.\n\nAlso, I think what Lustre\u0027s coordinator does is that it builds a bunch of hsm_action_lists by grouping requests of the same archive_id together and then sends each list one by one. Which means that in a single pass, a client could receive different lists with different archive_ids.",
      "range": {
        "startLine": 139,
        "startChar": 22,
        "endLine": 139,
        "endChar": 46
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5978621e_6e099b00",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "typo: send",
      "range": {
        "startLine": 139,
        "startChar": 16,
        "endLine": 139,
        "endChar": 21
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5289ac5e_b26a9170",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "afaiu that will still be one llapi_hsm_copytool_recv() per hsm_action_list, so we can\u0027t do that.\n\nThe main difference is that the real coordinator can just keep pushing lists and kuc will take care of buffering, but the preload lib doesn\u0027t have any such buffering: our protocol expects exactly one reply to each recv request, and we can\u0027t just send a list of lists.\n\nHonestly this is a rather bad API, but it\u0027s what fit llapi model best.\nFor new copytools it might make sense to have \"coordinatool-native\" copytools that could do better as most of the client code is shared and could be reused, but that\u0027ll require new protocol calls in my opinion.",
      "parentUuid": "92e57497_dc1a32a8",
      "range": {
        "startLine": 139,
        "startChar": 22,
        "endLine": 139,
        "endChar": 46
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71fa4f51_73a0b128",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5978621e_6e099b00",
      "range": {
        "startLine": 139,
        "startChar": 16,
        "endLine": 139,
        "endChar": 21
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62cf8264_4c7fb967",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T11:44:28Z",
      "side": 1,
      "message": "Ok, that makes sense, thanks.",
      "parentUuid": "5289ac5e_b26a9170",
      "range": {
        "startLine": 139,
        "startChar": 22,
        "endLine": 139,
        "endChar": 46
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "843bb3f7_78fd91bb",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T08:08:40Z",
      "side": 1,
      "message": "defect: correct me if I\u0027m wrong but I don\u0027t see a check for the archive_ids allowed by the client. We should make sure that we don\u0027t send requests to a copytool which doesn\u0027t want a given archive_id.",
      "range": {
        "startLine": 174,
        "startChar": 10,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8408be1a_a68b5144",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2022-06-09T10:09:20Z",
      "side": 1,
      "message": "Ack -- but not an easy fix and not a new bug, so leaving it as it until later.",
      "parentUuid": "843bb3f7_78fd91bb",
      "range": {
        "startLine": 174,
        "startChar": 10,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09e28183_df1d7b7d",
        "filename": "copytool/scheduler.c",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2022-06-09T11:44:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8408be1a_a68b5144",
      "range": {
        "startLine": 174,
        "startChar": 10,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "46a7b4f7c416549e4d7551f3e744b38fd56907fd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}